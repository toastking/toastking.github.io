{"componentChunkName":"component---src-templates-post-js","path":"/Vue 3 Intro/2020-10-11-Vue-3-Introduction/","result":{"data":{"markdownRemark":{"html":"<p>Vue 3 was released back in September so we've had some time to kick the tires on it now. It brings a lot of new features and also a lot of breaking changes. But, a lot of the breaking changes lay the groundwork for better tooling in the future. In this post we'll introduce Vue 3 by building a weather application using some of the new features.</p>\n<h1>Composition API</h1>\n<h2>Getting Started</h2>\n<p>The Composition API is probably the biggest new addition. It's similar to React Hooks. It's a way to share logic between components by writing them in a functional manner. It will also better Typescript compatibility in Vue 3.</p>\n<p>To start using the Composition API (with Typescript) we'll call the <code class=\"language-text\">defineComponent</code> function and return it from our Single File Component. That function takes an object representing a Vue component. Inside of that we'll implement a <code class=\"language-text\">setup</code> function.</p>\n<p>The <code class=\"language-text\">setup</code> function is how you start using the Composition API. The function returns an object containing any values you want to use.</p>\n<h2>Reactivity with ref and computed</h2>\n<p>The old way of writing components is now called the Options API. In the Options API reactive objects could be created by returning them from the <code class=\"language-text\">data</code> or <code class=\"language-text\">computed</code> fields in the component.</p>\n<p>In the Composition API you implement reactive objects by calling <code class=\"language-text\">ref</code> or <code class=\"language-text\">computed</code>.</p>\n<p><code class=\"language-text\">ref</code> corresponds to objects returned from <code class=\"language-text\">data</code>. The function returns reactive objects that can be updated in other places.</p>\n<p><code class=\"language-text\">computed</code> works the same way as the Options API. You pass in a function, whenever a reactive dependency in that function changes the function is run and the value is updated.</p>\n<p>To start our weather app we'll make a component with <code class=\"language-text\">defineComponent</code> and create a reactive variable with <code class=\"language-text\">ref</code> that represents the weekly forecast. We'll return this value from the <code class=\"language-text\">setup</code> function so we can access it in the template.</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;!-- Forecast.vue --&gt;\n&lt;template&gt;\n  &lt;div class=&quot;forecast&quot;&gt;\n    &lt;daily-weather\n      v-for=&quot;forecast of forecasts&quot;\n      :key=&quot;forecast.name&quot;\n      :forecast=&quot;forecast&quot;\n    /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport { defineComponent } from &#39;vue&#39;\n\nexport default defineComponent({\n  setup() {\n    /** Weather forecasts for the week */\n    const forecasts = ref&lt;Array&lt;Forecast&gt;&gt;([])\n\n    return { forecasts }\n  },\n  components: { DailyWeather },\n})\n&lt;/script&gt;</code></pre></div>\n<h1>Plugins</h1>\n<h2>Provide and Inject</h2>\n<p>Many Vue Plugins in Vue 2 would extend the Vue object. For example, Vuex adds a the <code class=\"language-text\">$store</code> value to the Vue object.</p>\n<p>The Composition API is functional, it doesn't have the same <code class=\"language-text\">this</code> context as the Options API. That means we can't access values from plugins that extend the Vue object.</p>\n<p>We'll use the <code class=\"language-text\">provide</code> and <code class=\"language-text\">inject</code> to access plugin values in the Composition API. These functions allow for dependency injection. We define a value somewhere up the component tree with <code class=\"language-text\">provide</code> and use it in any of it's child components with <code class=\"language-text\">inject</code>.</p>\n<h2>Location Plugin</h2>\n<p>For our weather app we need a way to get the user's current location. We'll make a plugin that calls the HTML5 Geolocation API to get the user's current location.</p>\n<p>In the <code class=\"language-text\">install</code> function for the plugin we'll provide it at the app level. We'll also add a function to use the provided value in components. That's the recommended way to do it as opposed to calling inject in the app component.</p>\n<p>In Vue 2 plugins would be provided with the Vue instance to the install function of the plugin. Now it provides an App instance. As you can see in the example above, instead of extending the Vue prototype we add a property to <code class=\"language-text\">app.config.globalProperties</code>. This is the same as <code class=\"language-text\">Vue.prototype</code>. The <code class=\"language-text\">app</code> object also has a <code class=\"language-text\">provide</code> object. This is how we provide the location function at the top level.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">//location-plugin.ts</span>\n\n<span class=\"token comment\">/**\n * Get the users current location using the HTML5 GeoLocation API.\n *  We wrap it in a promise to use with async/await.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Position<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentPosition</span><span class=\"token punctuation\">(</span>\n      position <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Resolve with location. location can now be accessed in the .then method.</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      err <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Reject with err. err can now be accessed in the .catch method.</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** Symbol to access the location function */</span>\n<span class=\"token keyword\">const</span> locationSymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'location'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> LocationPlugin<span class=\"token operator\">:</span> Plugin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span>\n  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// eslint-disable-next-line no-param-reassign</span>\n    app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>globalProperties<span class=\"token punctuation\">.</span>$location <span class=\"token operator\">=</span> getLocation\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span>locationSymbol<span class=\"token punctuation\">,</span> getLocation<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** Type of the location function */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LocationFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> getLocation\n\n<span class=\"token comment\">/** Function to use the location function from the API */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** Function to get the geolocation */</span>\n  <span class=\"token keyword\">const</span> locationFunction<span class=\"token operator\">:</span> LocationFunction <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>locationSymbol<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>locationFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Could not get inject LocationPlugin'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> locationFunction\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LocationPlugin</code></pre></div>\n<h2>Using the Plugin</h2>\n<p>Using plugins in somewhat similar in Vue 3. Instead of calling <code class=\"language-text\">Vue.use</code> and then instantiating the Vue instance you need to create the app first with <code class=\"language-text\">createApp</code>. Then you call <code class=\"language-text\">use</code> on the object returned from <code class=\"language-text\">createApp</code>. After that, call <code class=\"language-text\">mount</code> to instantiate the app.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//main.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span>\n<span class=\"token keyword\">import</span> LocationPlugin <span class=\"token keyword\">from</span> <span class=\"token string\">'./location-plugin/location-plugin'</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Use the location plugin we wrote</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>LocationPlugin<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we have a location function we can call to get the users location.</p>\n<h1>Lifecycle Hooks</h1>\n<p>In the Options API lifecycle hooks such as <code class=\"language-text\">onMounted</code> are properties of the component object. In the Composition API they're, you guessed it, functions!</p>\n<p>We want to load the weather forecast from the <a href=\"https://www.weather.gov/documentation/services-web-api\">NWS Weather API</a> when the Forecast component is loaded. Normally this is done in the <code class=\"language-text\">onMounted</code> hook. We'll call the <code class=\"language-text\">onMounted</code> function, which takes a function as a parameter. We need the user's location to get the current forecast so we'll use our plugin.</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;forecast&quot;&gt;\n    &lt;daily-weather\n      v-for=&quot;forecast of forecasts&quot;\n      :key=&quot;forecast.name&quot;\n      :forecast=&quot;forecast&quot;\n    /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport { defineComponent, inject, onMounted, ref } from &#39;vue&#39;\nimport fetchWeather, { Forecast } from &#39;../fetch_weather&#39;\nimport DailyWeather from &#39;./DailyWeather.vue&#39;\nimport { useLocation } from &#39;../location-plugin/location-plugin&#39;\n\nexport default defineComponent({\n  setup() {\n    /** Weather forecasts for the week */\n    const forecasts = ref&lt;Array&lt;Forecast&gt;&gt;([])\n\n    const getLocation = useLocation()\n\n    // Register a function to be called in the onMounted lifecycle\n    onMounted(async () =&gt; {\n      if (getLocation) {\n        const location = await getLocation()\n        forecasts.value = await fetchWeather(location)\n      }\n    })\n\n    return { forecasts }\n  },\n  components: { DailyWeather },\n})\n&lt;/script&gt;</code></pre></div>\n<h1>Fragments</h1>\n<p>Another quality of life improvement to Vue 3 is multi-root components. This means components can have more than one root node now. Instead of wrapping all your components in a div you can just add them.</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;!-- App.vue --&gt;\n\n&lt;template&gt;\n  &lt;page-header /&gt;\n  &lt;forecast /&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport { defineComponent } from &#39;vue&#39;\nimport Forecast from &#39;./components/Forecast.vue&#39;\nimport PageHeader from &#39;./components/PagerHeader.vue&#39;\n\nexport default defineComponent({\n  name: &#39;App&#39;,\n  components: {\n    Forecast,\n    PageHeader,\n  },\n  setup() {\n    return {}\n  },\n})\n&lt;/script&gt;</code></pre></div>\n<h1>Completed Code</h1>\n<p>You can see the completed code on Github at <a href=\"https://github.com/toastking/vue3-weather-example\">https://github.com/toastking/vue3-weather-example</a>.</p>","frontmatter":{"title":"Vue 3 Introduction By Example","date":"October 23, 2020"}}},"pageContext":{"slug":"/Vue 3 Intro/2020-10-11-Vue-3-Introduction/"}},"staticQueryHashes":["3649515864"]}